#region generated meta
import typing
class Inputs(typing.TypedDict):
    report_data: dict
    output_filename: str
    company_name: str | None
    save_path: str | None
class Outputs(typing.TypedDict):
    md_content: str
    file_path: str
    status: str
#endregion

from oocana import Context
import os
from datetime import datetime

def main(params: Inputs, context: Context) -> Outputs:
    """
    Generate comprehensive MD report from structured financial data

    Args:
        params: Input parameters including report data and configuration
        context: OOMOL context object

    Returns:
        Generated markdown content and file information
    """

    try:
        # Extract data structure
        data = params["report_data"]["data"]
        year = data["year"]
        quarter = data["quarter"]
        reports = data["reports"]

        # Generate report content
        md_content = generate_md_report(data, params.get("company_name"))

        # Determine save path
        if params.get("save_path"):
            file_path = params["save_path"]
        else:
            # Default to oomol-storage directory
            storage_dir = "/oomol-driver/oomol-storage"
            os.makedirs(storage_dir, exist_ok=True)
            filename = f"{params['output_filename']}_{year}Q{quarter}.md"
            file_path = os.path.join(storage_dir, filename)

        # Ensure directory exists
        os.makedirs(os.path.dirname(file_path), exist_ok=True)

        # Write MD file
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(md_content)

        return {
            "md_content": md_content,
            "file_path": file_path,
            "status": f"Successfully generated MD report with {len(reports)} Q&A items"
        }

    except Exception as e:
        raise ValueError(f"Failed to generate MD report: {str(e)}")

def generate_md_report(data: dict, company_name: str = None) -> str:
    """Generate formatted markdown report"""

    year = data["year"]
    quarter = data["quarter"]
    reports = data["reports"]

    # Generate timestamp
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Build markdown content
    md_lines = []

    # Header
    if company_name:
        md_lines.append(f"# {company_name} - Financial Analysis Report")
    else:
        md_lines.append("# Financial Analysis Report")

    md_lines.extend([
        "",
        f"**Report Period:** {year} Q{quarter}",
        f"**Generated:** {timestamp}",
        "",
        "---",
        ""
    ])

    # Executive Summary
    md_lines.extend([
        "## Executive Summary",
        "",
        f"This report contains {len(reports)} key financial analysis points for the {year} Q{quarter} period.",
        ""
    ])

    # Table of Contents
    md_lines.extend([
        "## Table of Contents",
        ""
    ])

    for i, report in enumerate(reports, 1):
        question = report.get("question", "").strip()
        if question:
            # Create anchor link
            anchor = question.lower().replace(" ", "-").replace("，", "").replace("。", "")
            anchor = ''.join(c for c in anchor if c.isalnum() or c == '-')
            md_lines.append(f"{i}. [{question}](#{anchor})")

    md_lines.extend(["", "---", ""])

    # Q&A Sections
    md_lines.append("## Detailed Analysis")
    md_lines.append("")

    for i, report in enumerate(reports, 1):
        question = report.get("question", "").strip()
        answer = report.get("answer", "").strip()

        if question and answer:
            # Create section header with anchor
            anchor = question.lower().replace(" ", "-").replace("，", "").replace("。", "")
            anchor = ''.join(c for c in anchor if c.isalnum() or c == '-')

            # Process answer to handle escaped newlines
            processed_answer = answer.replace("\\n", "\n")

            md_lines.extend([
                f"### {i}. {question} {{#{anchor}}}",
                "",
                processed_answer,
                "",
                "---",
                ""
            ])

    # Footer
    md_lines.extend([
        "## Report Information",
        "",
        f"- **Report Period:** {year} Q{quarter}",
        f"- **Total Analysis Points:** {len(reports)}",
        f"- **Generation Time:** {timestamp}",
        "",
        "*This report was automatically generated by OOMOL Financial Analysis Platform.*",
        ""
    ])

    return "\n".join(md_lines)